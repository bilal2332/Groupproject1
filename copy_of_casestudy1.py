# -*- coding: utf-8 -*-
"""Copy of CaseStudy1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MYu76Q3ZCm5ha0hcf2eNDjfJojTrZyqc
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

df=pd.read_csv('/content/_cafe_sales.csv')

from google.colab import drive
drive.mount('/content/drive')

df.dtypes

df['Transaction Date'] = pd.to_datetime(df['Transaction Date'], errors='coerce')

df['Quantity'] = pd.to_numeric(df['Quantity'], errors='coerce').astype('Int64')
df['Price Per Unit'] = pd.to_numeric(df['Price Per Unit'], errors='coerce').astype('float')
df['Total Spent'] = pd.to_numeric(df['Total Spent'], errors='coerce').astype('float')

df.head()

print("\nValue count in data")
for col in df:
  print(f"\nValue count in {col}")
  print(df[col].value_counts())
  print("----------------------------------------------------------")



df.isnull().sum()

missing_value_percentage=(df.isnull().sum()/len(df))*100
print(missing_value_percentage)

plt.figure(figsize=(10,15))


plt.subplot(5,2,1)
sns.histplot(df["Item"],color="#E4F8A3",edgecolor="black")
plt.title("Item")

plt.subplot(5,2,2)
sns.histplot(df["Quantity"],color="#E4F8A3",edgecolor="black")
plt.title("Quantity")

plt.subplot(5,2,3)
sns.histplot(df["Price Per Unit"],color="#E4F8A3",edgecolor="black")
plt.title("Price Per Unit")

plt.subplot(5,2,4)
sns.histplot(df["Total Spent"],color="#E4F8A3",edgecolor="black")
plt.title("Total Spent")

plt.subplot(5,2,5)
sns.histplot(df["Payment Method"],color="#E4F8A3",edgecolor="black")
plt.title("Payment Method")

plt.subplot(5,2,6)
sns.histplot(df["Location"],color="#E4F8A3",edgecolor="black")
plt.title("Location")

plt.subplot(5,2,7)
sns.histplot(df["Transaction Date"],color="#E4F8A3",edgecolor="black")
plt.title("Transaction Date")


plt.tight_layout()
plt.show()

# Dealing with categorical columns first

df['Item']=df['Item'].fillna("Unknown")

df = df.drop('Location', axis=1)

df['Item']=df['Payment Method'].fillna("Payment Method")

df['Transaction Date'] = df['Transaction Date'].fillna(method='ffill')

df.isnull().sum()

df['Quantity'] = df['Quantity'].fillna(df['Quantity'].median())
df['Price Per Unit'] = df['Price Per Unit'].fillna(df['Price Per Unit'].median())
df['Total Spent'] = df['Quantity'] * df['Price Per Unit']

df.isnull().sum()

"""Detect Outliers:


Use statistical methods like Z-score or IQR to find anomalies in sales amounts or quantities.


Treat Outliers:


Decide whether to cap, transform, or remove outliers based on their impact.



"""

#Quantity

plt.figure(figsize=(10,5))
sns.boxplot(df['Total Spent'])
plt.show()

Q1=df['Total Spent'].quantile(0.25)
Q3=df['Total Spent'].quantile(0.75)
IQR=Q3-Q1

lower_bound=Q1-(1.5*IQR)
upper_bound=Q3+(1.5*IQR)

df=df[(df['Total Spent']>=lower_bound) & (df['Total Spent']<=upper_bound)]

df['Total Spent'] = np.where(
    df['Total Spent'] < lower_bound, lower_bound,
    np.where(df['Total Spent'] > upper_bound, upper_bound, df['Total Spent'])
)

sns.boxplot(df['Total Spent'])
plt.show()

""". Data Visualization (30 mins)
Sales Trends:


Line plots showing sales over time.


Bar charts for sales by product category.

"""



#line plot

plt.figure(figsize=(10, 5))
sns.lineplot(x='Transaction Date', y='Total Spent', data=df)
plt.title('Sales over time')
plt.xlabel('Transaction Date')
plt.ylabel('Total Spent')
plt.show()

#Bar charts for sales by product category.

plt.figure(figsize=(10, 7))
sns.barplot(x='Item', y='Total Spent', data=df)
plt.title('Sales by Product Category')
plt.xlabel('Product Category')
plt.ylabel('Total Spent')
plt.xticks(rotation=90)
plt.show()

"""Customer Behavior:


Pie charts depicting purchase distribution among customer segments.


Heatmaps to identify peak sales hours or days.



"""

#pie chart

plt.figure(figsize=(10, 7))
df['Payment Method'].value_counts().plot(kind='pie', autopct='%1.1f%%')
plt.title('Purchase Distribution by Payment Method')
plt.ylabel('')

numeric_df = df.select_dtypes(include=np.number)

plt.figure(figsize=(10, 10))
sns.heatmap(numeric_df.corr(), annot=True, cmap="crest")
plt.show()

""". Feature Engineering (30 mins)
Create New Features:


Derive 'Total Sale' by multiplying quantity and unit price.


Extract 'Day of Week' and 'Hour' from timestamp for temporal analysis.

"""

df["Total_Sale"]=df['Price Per Unit']*df["Quantity"]
df.head()

df['day_of_week']=df['Transaction Date'].dt.day_name()
df['hour']=df['Transaction Date'].dt.hour

#hours can't be extracted ,since time is not given

df.head()

categorical_cols = ["Item", "Payment Method"]


df_encoded = pd.get_dummies(df, columns=categorical_cols)


print(df_encoded)

import pandas as pd
from google.colab import files

df.to_csv('cleaned_data.csv', index=False)
files.download('cleaned_data.csv')